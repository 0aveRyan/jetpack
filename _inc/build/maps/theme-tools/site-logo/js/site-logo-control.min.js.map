{"version":3,"sources":["theme-tools/site-logo/js/site-logo-control.js"],"names":["wp","$","api","customize","controlConstructor","site_logo","Control","extend","ready","data","this","container","find","l10n","mime","$imgContainer","$btnContainer","$img","prependTo","$placeholder","placeholder","$btnAdd","upload","$btnChange","change","$btnRemove","remove","_","bindAll","on","removeImg","setting","bind","render","event","preventDefault","frame","initFrame","open","media","title","choose","library","type","button","text","set","multiple","pick","attachment","state","get","single","reduceMembers","toJSON","desired","output","each","i","key","value","url","hide","sizes","medium","attr","show","id","jQuery"],"mappings":";;;;CAIA,SAAWA,EAAIC,GAEd,GAAIC,GAAMF,EAAGG,SAKbD,GAAIE,mBAAmBC,UAAYH,EAAII,QAAQC,QAK9CC,MAAO,WAIN,GAAIC,GAAOC,KAAKC,UAAUC,KAAM,4BAA6BH,MAG7DC,MAAKG,KAAOJ,EAAKI,KAEjBH,KAAKI,KAAOL,EAAKK,KAGjBJ,KAAKK,cAAgBd,EAAG,yCACxBS,KAAKM,cAAgBf,EAAG,yCACxBS,KAAKO,KAAOhB,EAAG,uCAAwCiB,UAAWR,KAAKK,eACvEL,KAAKS,aAAelB,EAAG,SAAWS,KAAKG,KAAKO,YAAc,WAAYF,UAAWR,KAAKK,eACtFL,KAAKW,QAAUpB,EAAG,4CAA8CS,KAAKG,KAAKS,OAAS,aAAcJ,UAAWR,KAAKM,eACjHN,KAAKa,WAAatB,EAAG,+CAAiDS,KAAKG,KAAKW,OAAS,aAAcN,UAAWR,KAAKM,eACvHN,KAAKe,WAAaxB,EAAG,+CAAiDS,KAAKG,KAAKa,OAAS,aAAcR,UAAWR,KAAKM,eAGvHW,EAAEC,QAASlB,KAAM,YAAa,SAAU,SAAU,QAElDA,KAAKW,QAAQQ,GAAI,QAASnB,KAAKY,QAC/BZ,KAAKa,WAAWM,GAAI,QAASnB,KAAKY,QAClCZ,KAAKe,WAAWI,GAAI,QAASnB,KAAKoB,WAGlCpB,KAAKqB,QAAQC,KAAM,SAAUtB,KAAKuB,QAElCvB,KAAKuB,UAMNX,OAAQ,SAAUY,GACjBA,EAAMC,iBAECzB,KAAK0B,OACX1B,KAAK2B,YAGN3B,KAAK0B,MAAME,QAKZD,UAAW,WACV3B,KAAK0B,MAAQpC,EAAGuC,OAEfC,MAAO9B,KAAKG,KAAK4B,OAEjBC,SACCC,KAAMjC,KAAKI,MAGZ8B,QAECC,KAAMnC,KAAKG,KAAKiC,KAGjBC,UAAU,IAIXrC,KAAK0B,MAAMP,GAAI,SAAUnB,KAAKsC,OAM/BA,KAAM,WAEL,GAAIC,GAAavC,KAAK0B,MAAMc,QAAQC,IAAK,aAAcC,QAClD,WAAYH,EAAWE,IAAK,SAEhCzC,KAAKqB,QAASrB,KAAK2C,cAAeJ,EAAWK,YAS/CD,cAAe,SAAUJ,GACxB,GAAIM,IACF,KACA,QACA,OAEDC,IAID,OAHAvD,GAAEwD,KAAMF,EAAS,SAAUG,EAAGC,GAC7BH,EAAOG,GAAOV,EAAWU,KAEnBH,GAMRvB,OAAQ,WACP,GAAI2B,GAAQlD,KAAKqB,SAEZ6B,IAASA,EAAMC,KACnBnD,KAAKS,aAAa2C,OACXF,EAAMG,OAAWH,EAAMG,MAAMC,OAGnCtD,KAAKO,KAAKgD,KAAM,MAAOL,EAAMG,MAAMC,OAAOH,KAF1CnD,KAAKO,KAAKgD,KAAM,MAAOL,EAAMC,KAI9BnD,KAAKO,KAAKiD,OACVxD,KAAKe,WAAWyC,OAChBxD,KAAKa,WAAW2C,OAChBxD,KAAKW,QAAQyC,SAEbpD,KAAKO,KAAK6C,OACVpD,KAAKS,aAAa+C,OAClBxD,KAAKe,WAAWqC,OAChBpD,KAAKa,WAAWuC,OAChBpD,KAAKW,QAAQ6C,SAQfpC,UAAW,SAAUI,GACpBA,EAAMC,iBACNzB,KAAKqB,SACJ8B,IAAK,GACLM,GAAI,QAMJzD,KAAKV,GAAIoE","file":"../../../../theme-tools/site-logo/js/site-logo-control.min.js","sourcesContent":["/* Do not modify this file directly. It is compiled from other files. */\n/**\n * JS for handling the Site Logo Customizer control.\n */\n(function( wp, $ ){\n\t// nice shortcut\n\tvar api = wp.customize;\n\t/**\n\t * The Customizer looks for wp.customizer.controlConstructor[type] functions\n\t * where type == the type member of a WP_Customize_Control\n\t */\n\tapi.controlConstructor.site_logo = api.Control.extend({\n\t\t/**\n\t\t * This method is called when the control is ready to run.\n\t\t * Do all of your setup and event binding here.\n\t\t */\n\t\tready: function() {\n\t\t\t// this.container is a jQuery object of your container\n\n\t\t\t// grab the bits of data from the title for specifying this control\n\t\t\tvar data = this.container.find( '.customize-control-title' ).data();\n\n\t\t\t// Use specific l10n data for this control where available\n\t\t\tthis.l10n = data.l10n;\n\t\t\t// Grab mime type\n\t\t\tthis.mime = data.mime;\n\n\t\t\t// Set up image container and button elements. Cache for re-use.\n\t\t\tthis.$imgContainer = $( '#customize-control-site_logo .current' );\n\t\t\tthis.$btnContainer = $( '#customize-control-site_logo .actions' );\n\t\t\tthis.$img = $( '<img class=\"site-logo-thumbnail\" />' ).prependTo( this.$imgContainer );\n\t\t\tthis.$placeholder = $( '<span>' + this.l10n.placeholder + '</span>' ).prependTo( this.$imgContainer );\n\t\t\tthis.$btnAdd = $( '<button type=\"button\" class=\"button new\">' + this.l10n.upload + '</button>' ).prependTo( this.$btnContainer );\n\t\t\tthis.$btnChange = $( '<button type=\"button\" class=\"button change\">' + this.l10n.change + '</button>' ).prependTo( this.$btnContainer );\n\t\t\tthis.$btnRemove = $( '<button type=\"button\" class=\"button remove\">' + this.l10n.remove + '</button>' ).prependTo( this.$btnContainer );\n\n\t\t\t// handy shortcut so we don't have to us _.bind every time we add a callback\n\t\t\t_.bindAll( this, 'removeImg', 'upload', 'render', 'pick' );\n\n\t\t\tthis.$btnAdd.on( 'click', this.upload );\n\t\t\tthis.$btnChange.on( 'click', this.upload );\n\t\t\tthis.$btnRemove.on( 'click', this.removeImg );\n\n\t\t\t// Call render method whenever setting is changed.\n\t\t\tthis.setting.bind( 'change', this.render );\n\t\t\t// Do initial rendering.\n\t\t\tthis.render();\n\t\t},\n\t\t/**\n\t\t * Remember that _.bind was used to maintain `this` as the control\n\t\t * object rather than the usual jQuery way of binding to the DOM element.\n\t\t */\n\t\tupload: function( event ) {\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( ! this.frame ) {\n\t\t\t\tthis.initFrame();\n\t\t\t}\n\n\t\t\tthis.frame.open();\n\t\t},\n\t\t/**\n\t\t * Set the media frame so that it can be reused and accessed when needed.\n\t\t */\n\t\tinitFrame: function() {\n\t\t\tthis.frame = wp.media({\n\t\t\t\t// The title of the media modal\n\t\t\t\ttitle: this.l10n.choose,\n\t\t\t\t// restrict to specified mime type\n\t\t\t\tlibrary: {\n\t\t\t\t\ttype: this.mime\n\t\t\t\t},\n\t\t\t\t// Customize the submit button.\n\t\t\t\tbutton: {\n\t\t\t\t\t// Set the text of the button.\n\t\t\t\t\ttext: this.l10n.set\n\t\t\t\t},\n\t\t\t\t// Just one, thanks.\n\t\t\t\tmultiple: false\n\t\t\t});\n\n\t\t\t// When an image is selected, run a callback.\n\t\t\tthis.frame.on( 'select', this.pick );\n\t\t},\n\t\t/**\n\t\t * Fired when an image is selected in the media modal. Gets the selected\n\t\t * image information, and sets it within the control.\n\t\t */\n\t\tpick: function() {\n\t\t\t// get the attachment from the modal frame\n\t\t\tvar attachment = this.frame.state().get( 'selection' ).single();\n\t\t\tif ( 'image' === attachment.get( 'type' ) ) {\n\t\t\t\t// set the setting - the callback will take care of rendering\n\t\t\t\tthis.setting( this.reduceMembers( attachment.toJSON() ) );\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Reduces the attachment object to just the few desired members.\n\t\t * @param  {object} attachment An attachment object provided by the\n\t\t *                             medial modal.\n\t\t * @return {object}            A reduced media object.\n\t\t */\n\t\treduceMembers: function( attachment ) {\n\t\t\tvar desired = [\n\t\t\t\t\t'id',\n\t\t\t\t\t'sizes',\n\t\t\t\t\t'url'\n\t\t\t\t],\n\t\t\t\toutput = {};\n\t\t\t$.each( desired, function( i, key ){\n\t\t\t\toutput[key] = attachment[key];\n\t\t\t});\n\t\t\treturn output;\n\t\t},\n\t\t/**\n\t\t * Called on init and whenever a setting is changed. Shows the thumbnail\n\t\t * when there is one or the upload button when there isn't.\n\t\t */\n\t\trender: function() {\n\t\t\tvar value = this.setting();\n\n\t\t\tif ( value && value.url ) {\n\t\t\t\tthis.$placeholder.hide();\n\t\t\t\tif ( ! value.sizes || ! value.sizes.medium ) {\n\t\t\t\t\tthis.$img.attr( 'src', value.url );\n\t\t\t\t} else {\n\t\t\t\t\tthis.$img.attr( 'src', value.sizes.medium.url );\n\t\t\t\t}\n\t\t\t\tthis.$img.show();\n\t\t\t\tthis.$btnRemove.show();\n\t\t\t\tthis.$btnChange.show();\n\t\t\t\tthis.$btnAdd.hide();\n\t\t\t} else {\n\t\t\t\tthis.$img.hide();\n\t\t\t\tthis.$placeholder.show();\n\t\t\t\tthis.$btnRemove.hide();\n\t\t\t\tthis.$btnChange.hide();\n\t\t\t\tthis.$btnAdd.show();\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Called when the \"Remove Image\" link is clicked. Sets thes setting back\n\t\t * to its default state.\n\t\t * @param  {object} event jQuery Event object from click event\n\t\t */\n\t\tremoveImg: function( event ) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.setting( {\n\t\t\t\turl: '',\n\t\t\t\tid: 0\n\t\t\t} );\n\t\t}\n\n\t});\n\n})( this.wp, jQuery );"]}